// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: packets_inbound.proto

package flyff

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FFPacketIn_Join struct {
	AuthKey uint32 `protobuf:"varint,1,opt,name=auth_key,json=authKey,proto3" json:"auth_key,omitempty"`
	Slot    uint32 `protobuf:"varint,2,opt,name=slot,proto3" json:"slot,omitempty"`
}

func (m *FFPacketIn_Join) Reset()      { *m = FFPacketIn_Join{} }
func (*FFPacketIn_Join) ProtoMessage() {}
func (*FFPacketIn_Join) Descriptor() ([]byte, []int) {
	return fileDescriptor_ede8e18b3ade3b3a, []int{0}
}
func (m *FFPacketIn_Join) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FFPacketIn_Join) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FFPacketIn_Join.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FFPacketIn_Join) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FFPacketIn_Join.Merge(m, src)
}
func (m *FFPacketIn_Join) XXX_Size() int {
	return m.Size()
}
func (m *FFPacketIn_Join) XXX_DiscardUnknown() {
	xxx_messageInfo_FFPacketIn_Join.DiscardUnknown(m)
}

var xxx_messageInfo_FFPacketIn_Join proto.InternalMessageInfo

func (m *FFPacketIn_Join) GetAuthKey() uint32 {
	if m != nil {
		return m.AuthKey
	}
	return 0
}

func (m *FFPacketIn_Join) GetSlot() uint32 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func init() {
	proto.RegisterType((*FFPacketIn_Join)(nil), "flyff.FFPacketIn_Join")
}

func init() { proto.RegisterFile("packets_inbound.proto", fileDescriptor_ede8e18b3ade3b3a) }

var fileDescriptor_ede8e18b3ade3b3a = []byte{
	// 171 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2d, 0x48, 0x4c, 0xce,
	0x4e, 0x2d, 0x29, 0x8e, 0xcf, 0xcc, 0x4b, 0xca, 0x2f, 0xcd, 0x4b, 0xd1, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0x62, 0x4d, 0xcb, 0xa9, 0x4c, 0x4b, 0x53, 0x72, 0xe0, 0xe2, 0x77, 0x73, 0x0b, 0x00,
	0xab, 0xf0, 0xcc, 0x8b, 0xf7, 0xca, 0xcf, 0xcc, 0x13, 0x92, 0xe4, 0xe2, 0x48, 0x2c, 0x2d, 0xc9,
	0x88, 0xcf, 0x4e, 0xad, 0x94, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0d, 0x62, 0x07, 0xf1, 0xbd, 0x53,
	0x2b, 0x85, 0x84, 0xb8, 0x58, 0x8a, 0x73, 0xf2, 0x4b, 0x24, 0x98, 0xc0, 0xc2, 0x60, 0xb6, 0x93,
	0xc9, 0x85, 0x87, 0x72, 0x0c, 0x37, 0x1e, 0xca, 0x31, 0x7c, 0x78, 0x28, 0xc7, 0xd8, 0xf0, 0x48,
	0x8e, 0x71, 0xc5, 0x23, 0x39, 0xc6, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0,
	0x48, 0x8e, 0xf1, 0xc5, 0x23, 0x39, 0x86, 0x0f, 0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63, 0xb8,
	0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x86, 0x24, 0x36, 0xb0, 0x2b, 0x8c, 0x01, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xa7, 0x3d, 0xa8, 0x63, 0x9e, 0x00, 0x00, 0x00,
}

func (this *FFPacketIn_Join) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FFPacketIn_Join)
	if !ok {
		that2, ok := that.(FFPacketIn_Join)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AuthKey != that1.AuthKey {
		return false
	}
	if this.Slot != that1.Slot {
		return false
	}
	return true
}
func (this *FFPacketIn_Join) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&flyff.FFPacketIn_Join{")
	s = append(s, "AuthKey: "+fmt.Sprintf("%#v", this.AuthKey)+",\n")
	s = append(s, "Slot: "+fmt.Sprintf("%#v", this.Slot)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPacketsInbound(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *FFPacketIn_Join) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FFPacketIn_Join) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FFPacketIn_Join) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Slot != 0 {
		i = encodeVarintPacketsInbound(dAtA, i, uint64(m.Slot))
		i--
		dAtA[i] = 0x10
	}
	if m.AuthKey != 0 {
		i = encodeVarintPacketsInbound(dAtA, i, uint64(m.AuthKey))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPacketsInbound(dAtA []byte, offset int, v uint64) int {
	offset -= sovPacketsInbound(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FFPacketIn_Join) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuthKey != 0 {
		n += 1 + sovPacketsInbound(uint64(m.AuthKey))
	}
	if m.Slot != 0 {
		n += 1 + sovPacketsInbound(uint64(m.Slot))
	}
	return n
}

func sovPacketsInbound(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPacketsInbound(x uint64) (n int) {
	return sovPacketsInbound(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *FFPacketIn_Join) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FFPacketIn_Join{`,
		`AuthKey:` + fmt.Sprintf("%v", this.AuthKey) + `,`,
		`Slot:` + fmt.Sprintf("%v", this.Slot) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPacketsInbound(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *FFPacketIn_Join) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketsInbound
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FFPacketIn_Join: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FFPacketIn_Join: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKey", wireType)
			}
			m.AuthKey = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketsInbound
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthKey |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketsInbound
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPacketsInbound(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacketsInbound
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPacketsInbound(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPacketsInbound
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacketsInbound
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacketsInbound
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPacketsInbound
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPacketsInbound
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPacketsInbound
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPacketsInbound        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPacketsInbound          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPacketsInbound = fmt.Errorf("proto: unexpected end of group")
)
